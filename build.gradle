import java.nio.charset.Charset

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

def jvmEncoding = Charset.defaultCharset().name()

if (jvmEncoding != "UTF-8") {
    throw new IllegalStateException("Build environment must be UTF-8 (it is: $jvmEncoding)" +
        "- add '-Dfile.encoding=UTF-8' to the GRADLE_OPTS environment variable ")
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('Must be built with Java 8 or higher')
}

allprojects {
    group = 'io.infinitape'
    version = "0.6.0-SNAPSHOT"

    repositories {
        jcenter()
        maven { url 'https://oss.jfrog.org/artifactory/repo' }
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    compileJava.options.compilerArgs \
        << '-Xlint:unchecked' << '-Xlint:deprecation'

    dependencies {
        testCompile 'org.objenesis:objenesis:2.+'
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
        testCompile 'nl.jqno.equalsverifier:equalsverifier:2.3.+'
    }

    test {
        jvmArgs '-ea'

        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    test.finalizedBy jacocoTestReport
}

bintray {
    user = project.hasProperty('bintrayUser') ?
        project.property('bintrayUser') : System.getenv('BINTRAY_USER')

    key = project.hasProperty('bintrayApiKey') ?
        project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['EtherJarPublication']

    pkg {
        repo = 'etherjar'
        name = 'etherjar'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/infinitape/etherjar.git'
        labels = ['ethereum', 'ethereum-classic', 'blockchain', 'smart-contracts', 'java-8']
        publicDownloadNumbers = true

        version {
            name = project.version
            description = project.description
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5.1'
}
