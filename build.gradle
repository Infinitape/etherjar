buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.kordamp.gradle:jacoco-gradle-plugin:0.25.0'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
}

allprojects {
    group = 'io.infinitape'
    version = "0.8.0-SNAPSHOT"

    repositories {
        jcenter()
        maven { url 'https://oss.jfrog.org/artifactory/repo' }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "splix"
            name "Igor Artamonov"
            email "igor@artamonov.ru"
        }
    }

    scm {
        connection "scm:git:git://github.com/infinitape/etherjar.git"
        developerConnection "scm:git:git://github.com/infinitape/etherjar.git"
        url "https://github.com/infinitape/etherjar"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    compileJava.options.compilerArgs \
        << '-Xlint:unchecked' << '-Xlint:deprecation'

    dependencies {
        testCompile 'org.objenesis:objenesis:2.+'
        testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
        testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.9'
        testCompile 'org.codehaus.groovy:groovy-all:2.5.7'
    }

    test {
        jvmArgs '-ea'

        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    test.finalizedBy jacocoTestReport

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }


    publishing {
        publications {
            EtherJarPublication(MavenPublication) {
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }

                groupId project.group
                artifactId project.name
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'EtherJar - Java Library to Build Application on Ethereum')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = System.getProperty('bintrayUser') ? System.getProperty('bintrayUser') : System.getenv('BINTRAY_USER')
        key = System.getProperty('bintrayApiKey') ? System.getProperty('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

        publications = ['EtherJarPublication']

        dryRun=false
        publish=true
        override=true

        pkg {
            repo = 'etherjar'
            userOrg = 'infinitape'
            name = project.name
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/infinitape/etherjar.git'
            labels = ['ethereum', 'ethereum-classic', 'blockchain', 'smart-contracts', 'java-8']
            publicDownloadNumbers = true

            version {
                name = project.version
                description = 'EtherJar ' + project.version + ' Beta'
                released  = new Date()
                vcsTag = project.version

                gpg {
                    sign = true
                }
            }
        }
    }
}

// Skip Bintray for the root module
bintray {
    dryRun=true
    publish=false
    override=true
    publications = []
    configurations = []
    pkg {
        repo = 'none'
        name = 'none'
        version {
            name = 'none'
        }
    }
}
