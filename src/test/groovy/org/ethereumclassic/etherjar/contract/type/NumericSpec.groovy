package org.ethereumclassic.etherjar.contract.type

import org.ethereumclassic.etherjar.model.Hex32
import spock.lang.Specification

class NumericSpec extends Specification {
    def "check is dynamic"() {
        when:
        UInt uintType = new UInt(8)
        then:
        uintType.isDynamic() == false
    }

    def "check get fixed size"() {
        when:
        UInt uintType = new UInt(size as int)
        then:
        uintType.getBytesFixedSize() == (size / 8)
        where:
        _ | size
        _ | 0
        _ | 40
        _ | 128
        _ | 256
    }

    def "check encode"() {
        when:
        UInt uintType = new UInt(bits)
        BigInteger par = new BigInteger(str, 16);
        then:
        uintType.encode(par)[0].toString() == encoded
        where:
        bits | str                 | encoded
        8   | "+1"                | "0x0000000000000000000000000000000000000000000000000000000000000001"
        16  | "+1"                | "0x0000000000000000000000000000000000000000000000000000000000000001"
        16  | "+ffff"             | "0x000000000000000000000000000000000000000000000000000000000000ffff"
        40  | "+1"                | "0x0000000000000000000000000000000000000000000000000000000000000001"
        40  | "+1122334455"       | "0x0000000000000000000000000000000000000000000000000000001122334455"
        64  | "+1"                | "0x0000000000000000000000000000000000000000000000000000000000000001"
        64  | "+1122334455667788" | "0x0000000000000000000000000000000000000000000000001122334455667788"
        120 | "+1"                | "0x0000000000000000000000000000000000000000000000000000000000000001"
        120 | "+112233445566778899aabbccddeeff"  | "0x0000000000000000000000000000000000112233445566778899aabbccddeeff"
        256 | "+1"                               | "0x0000000000000000000000000000000000000000000000000000000000000001"
        256 | "+112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122" | "0x112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122"
    }

    def "check decode"() {
        when:
        UInt uintType = new UInt(bits)
        Hex32[] par = [new Hex32(array as byte[])]
        BigInteger decoded = new BigInteger(str, 16)
        then:
        uintType.decode(par) == decoded
        where:
        bits | array                                                         | str
        8   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]              | "+1"
        16   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]               | "+1"
        16   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xff, (byte)0xff]   | "+ffff"
//        40   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]               | "+1"
//        40   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        64   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        64   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        120   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        120   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        256   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
//        256   | [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]                    | "+1"
    }
}